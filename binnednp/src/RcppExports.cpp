// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// buildLFactors
NumericVector buildLFactors(NumericVector t, double h1, double h2);
RcppExport SEXP _binnednp_buildLFactors(SEXP tSEXP, SEXP h1SEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(buildLFactors(t, h1, h2));
    return rcpp_result_gen;
END_RCPP
}
// calcw_cpp
NumericVector calcw_cpp(NumericVector xb, NumericVector y);
RcppExport SEXP _binnednp_calcw_cpp(SEXP xbSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(calcw_cpp(xb, y));
    return rcpp_result_gen;
END_RCPP
}
// Window_helper
double Window_helper(int b, NumericVector xb, NumericVector y, NumericVector t, NumericVector Lfactors, NumericVector J1_b, NumericVector J2_b);
RcppExport SEXP _binnednp_Window_helper(SEXP bSEXP, SEXP xbSEXP, SEXP ySEXP, SEXP tSEXP, SEXP LfactorsSEXP, SEXP J1_bSEXP, SEXP J2_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Lfactors(LfactorsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type J1_b(J1_bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type J2_b(J2_bSEXP);
    rcpp_result_gen = Rcpp::wrap(Window_helper(b, xb, y, t, Lfactors, J1_b, J2_b));
    return rcpp_result_gen;
END_RCPP
}
// main_method_np
void main_method_np(int hn, int B, NumericVector hseq, NumericMatrix xbm, NumericVector y, NumericVector t, NumericVector MSE_J1, NumericVector MSE_J2, double J1_np, double J2_np, NumericVector J1b, NumericVector J2b);
RcppExport SEXP _binnednp_main_method_np(SEXP hnSEXP, SEXP BSEXP, SEXP hseqSEXP, SEXP xbmSEXP, SEXP ySEXP, SEXP tSEXP, SEXP MSE_J1SEXP, SEXP MSE_J2SEXP, SEXP J1_npSEXP, SEXP J2_npSEXP, SEXP J1bSEXP, SEXP J2bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type hn(hnSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hseq(hseqSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xbm(xbmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MSE_J1(MSE_J1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MSE_J2(MSE_J2SEXP);
    Rcpp::traits::input_parameter< double >::type J1_np(J1_npSEXP);
    Rcpp::traits::input_parameter< double >::type J2_np(J2_npSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type J1b(J1bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type J2b(J2bSEXP);
    main_method_np(hn, B, hseq, xbm, y, t, MSE_J1, MSE_J2, J1_np, J2_np, J1b, J2b);
    return R_NilValue;
END_RCPP
}
// pnorm_cpp
double pnorm_cpp(double x);
RcppExport SEXP _binnednp_pnorm_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pnorm_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// Fg
double Fg(double x, NumericVector w, NumericVector t, double g);
RcppExport SEXP _binnednp_Fg(SEXP xSEXP, SEXP wSEXP, SEXP tSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Fg(x, w, t, g));
    return rcpp_result_gen;
END_RCPP
}
// biasFh
double biasFh(double x, int n, NumericVector t, NumericVector w, NumericVector p, double g, double h);
RcppExport SEXP _binnednp_biasFh(SEXP xSEXP, SEXP nSEXP, SEXP tSEXP, SEXP wSEXP, SEXP pSEXP, SEXP gSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(biasFh(x, n, t, w, p, g, h));
    return rcpp_result_gen;
END_RCPP
}
// varFh
double varFh(double x, int n, NumericVector t, NumericVector p, double h);
RcppExport SEXP _binnednp_varFh(SEXP xSEXP, SEXP nSEXP, SEXP tSEXP, SEXP pSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(varFh(x, n, t, p, h));
    return rcpp_result_gen;
END_RCPP
}
// mise_Fh
double mise_Fh(double h, int n, NumericVector t, NumericVector w, NumericVector p, double g, int lgrid, double lim1, double lim2);
RcppExport SEXP _binnednp_mise_Fh(SEXP hSEXP, SEXP nSEXP, SEXP tSEXP, SEXP wSEXP, SEXP pSEXP, SEXP gSEXP, SEXP lgridSEXP, SEXP lim1SEXP, SEXP lim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type lgrid(lgridSEXP);
    Rcpp::traits::input_parameter< double >::type lim1(lim1SEXP);
    Rcpp::traits::input_parameter< double >::type lim2(lim2SEXP);
    rcpp_result_gen = Rcpp::wrap(mise_Fh(h, n, t, w, p, g, lgrid, lim1, lim2));
    return rcpp_result_gen;
END_RCPP
}
// boot_bw_dist
double boot_bw_dist(int nit, double h0, double h1, double rho, int n, NumericVector t, NumericVector w, NumericVector p, double g, int lgrid, double lim1, double lim2);
RcppExport SEXP _binnednp_boot_bw_dist(SEXP nitSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP rhoSEXP, SEXP nSEXP, SEXP tSEXP, SEXP wSEXP, SEXP pSEXP, SEXP gSEXP, SEXP lgridSEXP, SEXP lim1SEXP, SEXP lim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type lgrid(lgridSEXP);
    Rcpp::traits::input_parameter< double >::type lim1(lim1SEXP);
    Rcpp::traits::input_parameter< double >::type lim2(lim2SEXP);
    rcpp_result_gen = Rcpp::wrap(boot_bw_dist(nit, h0, h1, rho, n, t, w, p, g, lgrid, lim1, lim2));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_cpp
double dnorm_cpp(double x);
RcppExport SEXP _binnednp_dnorm_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_d2_cpp
double dnorm_d2_cpp(double x);
RcppExport SEXP _binnednp_dnorm_d2_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_d2_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// fh_combt
double fh_combt(double x, NumericVector t, NumericVector w, double h);
RcppExport SEXP _binnednp_fh_combt(SEXP xSEXP, SEXP tSEXP, SEXP wSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(fh_combt(x, t, w, h));
    return rcpp_result_gen;
END_RCPP
}
// fh_combt_d2
double fh_combt_d2(double x, NumericVector t, NumericVector w, double h);
RcppExport SEXP _binnednp_fh_combt_d2(SEXP xSEXP, SEXP tSEXP, SEXP wSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(fh_combt_d2(x, t, w, h));
    return rcpp_result_gen;
END_RCPP
}
// curv_cpp
double curv_cpp(NumericVector t, NumericVector w, double h, double lim1, double lim2, int lgrid);
RcppExport SEXP _binnednp_curv_cpp(SEXP tSEXP, SEXP wSEXP, SEXP hSEXP, SEXP lim1SEXP, SEXP lim2SEXP, SEXP lgridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type lim1(lim1SEXP);
    Rcpp::traits::input_parameter< double >::type lim2(lim2SEXP);
    Rcpp::traits::input_parameter< int >::type lgrid(lgridSEXP);
    rcpp_result_gen = Rcpp::wrap(curv_cpp(t, w, h, lim1, lim2, lgrid));
    return rcpp_result_gen;
END_RCPP
}
// dicoto_lambda
NumericVector dicoto_lambda(double lambda, int nith, double h0, double h1, double rho, NumericVector hist, NumericVector combt, NumericVector combw, double lim1, double lim2);
RcppExport SEXP _binnednp_dicoto_lambda(SEXP lambdaSEXP, SEXP nithSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP rhoSEXP, SEXP histSEXP, SEXP combtSEXP, SEXP combwSEXP, SEXP lim1SEXP, SEXP lim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nith(nithSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hist(histSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type combt(combtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type combw(combwSEXP);
    Rcpp::traits::input_parameter< double >::type lim1(lim1SEXP);
    Rcpp::traits::input_parameter< double >::type lim2(lim2SEXP);
    rcpp_result_gen = Rcpp::wrap(dicoto_lambda(lambda, nith, h0, h1, rho, hist, combt, combw, lim1, lim2));
    return rcpp_result_gen;
END_RCPP
}
// zeta_hist_p
double zeta_hist_p(NumericVector hist, NumericVector combt, NumericVector comby, NumericVector combw, double Af2_mixt, double l0, double l1, double h0, double h1, double lrho, double rho, int nitlambda, int nith, double lim1, double lim2);
RcppExport SEXP _binnednp_zeta_hist_p(SEXP histSEXP, SEXP combtSEXP, SEXP combySEXP, SEXP combwSEXP, SEXP Af2_mixtSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP lrhoSEXP, SEXP rhoSEXP, SEXP nitlambdaSEXP, SEXP nithSEXP, SEXP lim1SEXP, SEXP lim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type hist(histSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type combt(combtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type comby(combySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type combw(combwSEXP);
    Rcpp::traits::input_parameter< double >::type Af2_mixt(Af2_mixtSEXP);
    Rcpp::traits::input_parameter< double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type lrho(lrhoSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type nitlambda(nitlambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nith(nithSEXP);
    Rcpp::traits::input_parameter< double >::type lim1(lim1SEXP);
    Rcpp::traits::input_parameter< double >::type lim2(lim2SEXP);
    rcpp_result_gen = Rcpp::wrap(zeta_hist_p(hist, combt, comby, combw, Af2_mixt, l0, l1, h0, h1, lrho, rho, nitlambda, nith, lim1, lim2));
    return rcpp_result_gen;
END_RCPP
}
// pnorm_cpp_fun
double pnorm_cpp_fun(double x);
RcppExport SEXP _binnednp_pnorm_cpp_fun(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pnorm_cpp_fun(x));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_d1_cpp
double dnorm_d1_cpp(double x);
RcppExport SEXP _binnednp_dnorm_d1_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_d1_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// Fh_combt
double Fh_combt(double x, NumericVector t, NumericVector w, double h);
RcppExport SEXP _binnednp_Fh_combt(SEXP xSEXP, SEXP tSEXP, SEXP wSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(Fh_combt(x, t, w, h));
    return rcpp_result_gen;
END_RCPP
}
// fh_combt_d1
double fh_combt_d1(double x, NumericVector t, NumericVector w, double h);
RcppExport SEXP _binnednp_fh_combt_d1(SEXP xSEXP, SEXP tSEXP, SEXP wSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(fh_combt_d1(x, t, w, h));
    return rcpp_result_gen;
END_RCPP
}
// slope_cpp
double slope_cpp(NumericVector t, NumericVector w, double h, double lim1, double lim2, int lgrid);
RcppExport SEXP _binnednp_slope_cpp(SEXP tSEXP, SEXP wSEXP, SEXP hSEXP, SEXP lim1SEXP, SEXP lim2SEXP, SEXP lgridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type lim1(lim1SEXP);
    Rcpp::traits::input_parameter< double >::type lim2(lim2SEXP);
    Rcpp::traits::input_parameter< int >::type lgrid(lgridSEXP);
    rcpp_result_gen = Rcpp::wrap(slope_cpp(t, w, h, lim1, lim2, lgrid));
    return rcpp_result_gen;
END_RCPP
}
// dicoto_lambda_dist
NumericVector dicoto_lambda_dist(double lambda, int nith, double h0, double h1, double rho, NumericVector emp, NumericVector comby, NumericVector combt, NumericVector combw, double lim1, double lim2);
RcppExport SEXP _binnednp_dicoto_lambda_dist(SEXP lambdaSEXP, SEXP nithSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP rhoSEXP, SEXP empSEXP, SEXP combySEXP, SEXP combtSEXP, SEXP combwSEXP, SEXP lim1SEXP, SEXP lim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nith(nithSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emp(empSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type comby(combySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type combt(combtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type combw(combwSEXP);
    Rcpp::traits::input_parameter< double >::type lim1(lim1SEXP);
    Rcpp::traits::input_parameter< double >::type lim2(lim2SEXP);
    rcpp_result_gen = Rcpp::wrap(dicoto_lambda_dist(lambda, nith, h0, h1, rho, emp, comby, combt, combw, lim1, lim2));
    return rcpp_result_gen;
END_RCPP
}
// zeta_hist_p_dist
double zeta_hist_p_dist(NumericVector emp, NumericVector combt, NumericVector comby, NumericVector combw, double Af1_mixt, double l0, double l1, double h0, double h1, double lrho, double rho, int nitlambda, int nith, double lim1, double lim2);
RcppExport SEXP _binnednp_zeta_hist_p_dist(SEXP empSEXP, SEXP combtSEXP, SEXP combySEXP, SEXP combwSEXP, SEXP Af1_mixtSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP lrhoSEXP, SEXP rhoSEXP, SEXP nitlambdaSEXP, SEXP nithSEXP, SEXP lim1SEXP, SEXP lim2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type emp(empSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type combt(combtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type comby(combySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type combw(combwSEXP);
    Rcpp::traits::input_parameter< double >::type Af1_mixt(Af1_mixtSEXP);
    Rcpp::traits::input_parameter< double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type lrho(lrhoSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type nitlambda(nitlambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nith(nithSEXP);
    Rcpp::traits::input_parameter< double >::type lim1(lim1SEXP);
    Rcpp::traits::input_parameter< double >::type lim2(lim2SEXP);
    rcpp_result_gen = Rcpp::wrap(zeta_hist_p_dist(emp, combt, comby, combw, Af1_mixt, l0, l1, h0, h1, lrho, rho, nitlambda, nith, lim1, lim2));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_mise_initialize
void gaussian_mise_initialize(int n, int k, NumericVector wg, NumericVector w, NumericVector t, double gboot, double AK);
RcppExport SEXP _binnednp_gaussian_mise_initialize(SEXP nSEXP, SEXP kSEXP, SEXP wgSEXP, SEXP wSEXP, SEXP tSEXP, SEXP gbootSEXP, SEXP AKSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wg(wgSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type gboot(gbootSEXP);
    Rcpp::traits::input_parameter< double >::type AK(AKSEXP);
    gaussian_mise_initialize(n, k, wg, w, t, gboot, AK);
    return R_NilValue;
END_RCPP
}
// gaussian_mise
double gaussian_mise(double h);
RcppExport SEXP _binnednp_gaussian_mise(SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_mise(h));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_mise_loop
double gaussian_mise_loop(int hn, NumericVector seq, double rho);
RcppExport SEXP _binnednp_gaussian_mise_loop(SEXP hnSEXP, SEXP seqSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type hn(hnSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_mise_loop(hn, seq, rho));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_dichotomy
double gaussian_dichotomy(int hn, NumericVector t);
RcppExport SEXP _binnednp_gaussian_dichotomy(SEXP hnSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type hn(hnSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_dichotomy(hn, t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_binnednp_buildLFactors", (DL_FUNC) &_binnednp_buildLFactors, 3},
    {"_binnednp_calcw_cpp", (DL_FUNC) &_binnednp_calcw_cpp, 2},
    {"_binnednp_Window_helper", (DL_FUNC) &_binnednp_Window_helper, 7},
    {"_binnednp_main_method_np", (DL_FUNC) &_binnednp_main_method_np, 12},
    {"_binnednp_pnorm_cpp", (DL_FUNC) &_binnednp_pnorm_cpp, 1},
    {"_binnednp_Fg", (DL_FUNC) &_binnednp_Fg, 4},
    {"_binnednp_biasFh", (DL_FUNC) &_binnednp_biasFh, 7},
    {"_binnednp_varFh", (DL_FUNC) &_binnednp_varFh, 5},
    {"_binnednp_mise_Fh", (DL_FUNC) &_binnednp_mise_Fh, 9},
    {"_binnednp_boot_bw_dist", (DL_FUNC) &_binnednp_boot_bw_dist, 12},
    {"_binnednp_dnorm_cpp", (DL_FUNC) &_binnednp_dnorm_cpp, 1},
    {"_binnednp_dnorm_d2_cpp", (DL_FUNC) &_binnednp_dnorm_d2_cpp, 1},
    {"_binnednp_fh_combt", (DL_FUNC) &_binnednp_fh_combt, 4},
    {"_binnednp_fh_combt_d2", (DL_FUNC) &_binnednp_fh_combt_d2, 4},
    {"_binnednp_curv_cpp", (DL_FUNC) &_binnednp_curv_cpp, 6},
    {"_binnednp_dicoto_lambda", (DL_FUNC) &_binnednp_dicoto_lambda, 10},
    {"_binnednp_zeta_hist_p", (DL_FUNC) &_binnednp_zeta_hist_p, 15},
    {"_binnednp_pnorm_cpp_fun", (DL_FUNC) &_binnednp_pnorm_cpp_fun, 1},
    {"_binnednp_dnorm_d1_cpp", (DL_FUNC) &_binnednp_dnorm_d1_cpp, 1},
    {"_binnednp_Fh_combt", (DL_FUNC) &_binnednp_Fh_combt, 4},
    {"_binnednp_fh_combt_d1", (DL_FUNC) &_binnednp_fh_combt_d1, 4},
    {"_binnednp_slope_cpp", (DL_FUNC) &_binnednp_slope_cpp, 6},
    {"_binnednp_dicoto_lambda_dist", (DL_FUNC) &_binnednp_dicoto_lambda_dist, 11},
    {"_binnednp_zeta_hist_p_dist", (DL_FUNC) &_binnednp_zeta_hist_p_dist, 15},
    {"_binnednp_gaussian_mise_initialize", (DL_FUNC) &_binnednp_gaussian_mise_initialize, 7},
    {"_binnednp_gaussian_mise", (DL_FUNC) &_binnednp_gaussian_mise, 1},
    {"_binnednp_gaussian_mise_loop", (DL_FUNC) &_binnednp_gaussian_mise_loop, 3},
    {"_binnednp_gaussian_dichotomy", (DL_FUNC) &_binnednp_gaussian_dichotomy, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_binnednp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
