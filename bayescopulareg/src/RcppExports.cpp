// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cdf_cpp
arma::vec cdf_cpp(arma::vec const& y, arma::mat const& X, arma::vec const& beta, double const& phi, std::string const& distname, const std::string& linkname, const int& n);
RcppExport SEXP _bayescopulareg_cdf_cpp(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cdf_cpp(y, X, beta, phi, distname, linkname, n));
    return rcpp_result_gen;
END_RCPP
}
// conv_to_normal
arma::vec conv_to_normal(arma::vec const& y, arma::mat const& X, arma::vec const& beta, double const& phi, std::string const& distname, std::string const& linkname, int const& n);
RcppExport SEXP _bayescopulareg_conv_to_normal(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(conv_to_normal(y, X, beta, phi, distname, linkname, n));
    return rcpp_result_gen;
END_RCPP
}
// condnormal_cpp
List condnormal_cpp(arma::mat Z, arma::mat Gamma, int const& j);
RcppExport SEXP _bayescopulareg_condnormal_cpp(SEXP ZSEXP, SEXP GammaSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< int const& >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(condnormal_cpp(Z, Gamma, j));
    return rcpp_result_gen;
END_RCPP
}
// copula_predict
arma::mat copula_predict(List const& Xlist, std::vector<std::string> const& distnamevec, std::vector<std::string> const& linknamevec, arma::mat const& Gamma, List const& betasample, arma::vec const& phisample, int const& n, int const& J);
RcppExport SEXP _bayescopulareg_copula_predict(SEXP XlistSEXP, SEXP distnamevecSEXP, SEXP linknamevecSEXP, SEXP GammaSEXP, SEXP betasampleSEXP, SEXP phisampleSEXP, SEXP nSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> const& >::type distnamevec(distnamevecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> const& >::type linknamevec(linknamevecSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< List const& >::type betasample(betasampleSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type phisample(phisampleSEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< int const& >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_predict(Xlist, distnamevec, linknamevec, Gamma, betasample, phisample, n, J));
    return rcpp_result_gen;
END_RCPP
}
// copula_predict_all
arma::cube copula_predict_all(List const& Xlist, std::vector<std::string> const& distnamevec, std::vector<std::string> const& linknamevec, List const& betasamplelist, arma::mat const& phisamplemat, arma::cube const& Gammaarray, int const& n, int const& J, int const& M);
RcppExport SEXP _bayescopulareg_copula_predict_all(SEXP XlistSEXP, SEXP distnamevecSEXP, SEXP linknamevecSEXP, SEXP betasamplelistSEXP, SEXP phisamplematSEXP, SEXP GammaarraySEXP, SEXP nSEXP, SEXP JSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> const& >::type distnamevec(distnamevecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> const& >::type linknamevec(linknamevecSEXP);
    Rcpp::traits::input_parameter< List const& >::type betasamplelist(betasamplelistSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type phisamplemat(phisamplematSEXP);
    Rcpp::traits::input_parameter< arma::cube const& >::type Gammaarray(GammaarraySEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< int const& >::type J(JSEXP);
    Rcpp::traits::input_parameter< int const& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_predict_all(Xlist, distnamevec, linknamevec, betasamplelist, phisamplemat, Gammaarray, n, J, M));
    return rcpp_result_gen;
END_RCPP
}
// copula_predict_all_list
List copula_predict_all_list(List const& Xlistlist, std::vector<std::string> const& distnamevec, std::vector<std::string> const& linknamevec, List const& betasamplelist, arma::mat const& phisamplemat, arma::cube const& Gammaarray, int const& n, int const& J, int const& M);
RcppExport SEXP _bayescopulareg_copula_predict_all_list(SEXP XlistlistSEXP, SEXP distnamevecSEXP, SEXP linknamevecSEXP, SEXP betasamplelistSEXP, SEXP phisamplematSEXP, SEXP GammaarraySEXP, SEXP nSEXP, SEXP JSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List const& >::type Xlistlist(XlistlistSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> const& >::type distnamevec(distnamevecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> const& >::type linknamevec(linknamevecSEXP);
    Rcpp::traits::input_parameter< List const& >::type betasamplelist(betasamplelistSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type phisamplemat(phisamplematSEXP);
    Rcpp::traits::input_parameter< arma::cube const& >::type Gammaarray(GammaarraySEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< int const& >::type J(JSEXP);
    Rcpp::traits::input_parameter< int const& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(copula_predict_all_list(Xlistlist, distnamevec, linknamevec, betasamplelist, phisamplemat, Gammaarray, n, J, M));
    return rcpp_result_gen;
END_RCPP
}
// invcdf_cpp
arma::vec invcdf_cpp(arma::vec const& u, arma::mat const& X, arma::vec const& beta, double const& phi, std::string const& distname, const std::string& linkname, const int& n);
RcppExport SEXP _bayescopulareg_invcdf_cpp(SEXP uSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(invcdf_cpp(u, X, beta, phi, distname, linkname, n));
    return rcpp_result_gen;
END_RCPP
}
// sample_y
arma::vec sample_y(arma::vec const& z, arma::mat const& X, arma::vec const& beta, double const& phi, std::string const& distname, std::string const& linkname, int const& n);
RcppExport SEXP _bayescopulareg_sample_y(SEXP zSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_y(z, X, beta, phi, distname, linkname, n));
    return rcpp_result_gen;
END_RCPP
}
// linkinv_cpp
arma::vec linkinv_cpp(arma::vec const& eta, std::string const& linkname);
RcppExport SEXP _bayescopulareg_linkinv_cpp(SEXP etaSEXP, SEXP linknameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type linkname(linknameSEXP);
    rcpp_result_gen = Rcpp::wrap(linkinv_cpp(eta, linkname));
    return rcpp_result_gen;
END_RCPP
}
// logPost
double logPost(arma::vec const& y, arma::mat const& X, arma::vec const& beta, double const& phi, arma::mat const& Z, arma::mat const& Gammainv, std::string const& distname, std::string const& linkname, int const& n, int const& j, int const& J, int const& p, double const& c0, double const& alpha0, double const& gamma0, double const& b0, arma::vec const& y0, arma::mat const& X0, int const& n0);
RcppExport SEXP _bayescopulareg_logPost(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP ZSEXP, SEXP GammainvSEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP nSEXP, SEXP jSEXP, SEXP JSEXP, SEXP pSEXP, SEXP c0SEXP, SEXP alpha0SEXP, SEXP gamma0SEXP, SEXP b0SEXP, SEXP y0SEXP, SEXP X0SEXP, SEXP n0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Gammainv(GammainvSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< int const& >::type j(jSEXP);
    Rcpp::traits::input_parameter< int const& >::type J(JSEXP);
    Rcpp::traits::input_parameter< int const& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double const& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double const& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double const& >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< double const& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int const& >::type n0(n0SEXP);
    rcpp_result_gen = Rcpp::wrap(logPost(y, X, beta, phi, Z, Gammainv, distname, linkname, n, j, J, p, c0, alpha0, gamma0, b0, y0, X0, n0));
    return rcpp_result_gen;
END_RCPP
}
// logPowerPrior_cpp
double logPowerPrior_cpp(arma::vec const& y0, arma::mat const& X0, arma::vec const& beta, double const& phi, double const& b0, std::string const& distname, std::string const& linkname, int const& n0);
RcppExport SEXP _bayescopulareg_logPowerPrior_cpp(SEXP y0SEXP, SEXP X0SEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP b0SEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP n0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double const& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< std::string const& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< int const& >::type n0(n0SEXP);
    rcpp_result_gen = Rcpp::wrap(logPowerPrior_cpp(y0, X0, beta, phi, b0, distname, linkname, n0));
    return rcpp_result_gen;
END_RCPP
}
// logInitPrior_cpp
double logInitPrior_cpp(arma::vec const& beta, double const& phi, double const& c0, double const& alpha0, double const& gamma0, int const& p);
RcppExport SEXP _bayescopulareg_logInitPrior_cpp(SEXP betaSEXP, SEXP phiSEXP, SEXP c0SEXP, SEXP alpha0SEXP, SEXP gamma0SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double const& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double const& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double const& >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< int const& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(logInitPrior_cpp(beta, phi, c0, alpha0, gamma0, p));
    return rcpp_result_gen;
END_RCPP
}
// loglik_cpp
double loglik_cpp(const arma::vec& y, const arma::mat& X, const arma::vec& beta, const double& phi, const std::string& distname, const std::string& linkname, const int& n);
RcppExport SEXP _bayescopulareg_loglik_cpp(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_cpp(y, X, beta, phi, distname, linkname, n));
    return rcpp_result_gen;
END_RCPP
}
// sample_copula_cpp
List sample_copula_cpp(arma::mat const& ymat, List const& Xlist, std::vector<std::string> const& distnamevec, std::vector<std::string> const& linknamevec, arma::vec const& c0vec, List const& S0betalist, arma::vec sigma0logphivec, arma::vec const& alpha0vec, arma::vec const& gamma0vec, arma::mat Gamma, int const& v0, arma::mat const& V0, double const& b0, arma::mat const& y0mat, List const& X0list, int const& M, List beta0list, arma::vec phi0vec, int const& thin);
RcppExport SEXP _bayescopulareg_sample_copula_cpp(SEXP ymatSEXP, SEXP XlistSEXP, SEXP distnamevecSEXP, SEXP linknamevecSEXP, SEXP c0vecSEXP, SEXP S0betalistSEXP, SEXP sigma0logphivecSEXP, SEXP alpha0vecSEXP, SEXP gamma0vecSEXP, SEXP GammaSEXP, SEXP v0SEXP, SEXP V0SEXP, SEXP b0SEXP, SEXP y0matSEXP, SEXP X0listSEXP, SEXP MSEXP, SEXP beta0listSEXP, SEXP phi0vecSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< List const& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> const& >::type distnamevec(distnamevecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> const& >::type linknamevec(linknamevecSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type c0vec(c0vecSEXP);
    Rcpp::traits::input_parameter< List const& >::type S0betalist(S0betalistSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma0logphivec(sigma0logphivecSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type alpha0vec(alpha0vecSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type gamma0vec(gamma0vecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< int const& >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< double const& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type y0mat(y0matSEXP);
    Rcpp::traits::input_parameter< List const& >::type X0list(X0listSEXP);
    Rcpp::traits::input_parameter< int const& >::type M(MSEXP);
    Rcpp::traits::input_parameter< List >::type beta0list(beta0listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi0vec(phi0vecSEXP);
    Rcpp::traits::input_parameter< int const& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_copula_cpp(ymat, Xlist, distnamevec, linknamevec, c0vec, S0betalist, sigma0logphivec, alpha0vec, gamma0vec, Gamma, v0, V0, b0, y0mat, X0list, M, beta0list, phi0vec, thin));
    return rcpp_result_gen;
END_RCPP
}
// update_Gamma
arma::mat update_Gamma(arma::mat const& Z, int const& n, int const& v0, arma::mat const& v0V0);
RcppExport SEXP _bayescopulareg_update_Gamma(SEXP ZSEXP, SEXP nSEXP, SEXP v0SEXP, SEXP v0V0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< int const& >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type v0V0(v0V0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_Gamma(Z, n, v0, v0V0));
    return rcpp_result_gen;
END_RCPP
}
// update_Z
arma::mat update_Z(arma::vec const& y, arma::mat const& X, arma::vec const& beta, double const& phi, arma::mat Z, arma::mat const& Gamma, std::string const& distname, const std::string& linkname, const int& n, int const& j);
RcppExport SEXP _bayescopulareg_update_Z(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP ZSEXP, SEXP GammaSEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP nSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< int const& >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Z(y, X, beta, phi, Z, Gamma, distname, linkname, n, j));
    return rcpp_result_gen;
END_RCPP
}
// update_params
List update_params(arma::vec const& y, arma::mat const& X, arma::vec const& beta, double const& phi, arma::mat Z, arma::mat Gammainv, double const& c0, arma::mat const& S0beta, double const& sigma0logphi, std::string const& distname, std::string const& linkname, int const& n, int const& j, int const& J, int const& p, double const& alpha0, double const& gamma0, double const& b0, arma::vec const& y0, arma::mat const& X0, int const& n0);
RcppExport SEXP _bayescopulareg_update_params(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP ZSEXP, SEXP GammainvSEXP, SEXP c0SEXP, SEXP S0betaSEXP, SEXP sigma0logphiSEXP, SEXP distnameSEXP, SEXP linknameSEXP, SEXP nSEXP, SEXP jSEXP, SEXP JSEXP, SEXP pSEXP, SEXP alpha0SEXP, SEXP gamma0SEXP, SEXP b0SEXP, SEXP y0SEXP, SEXP X0SEXP, SEXP n0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gammainv(GammainvSEXP);
    Rcpp::traits::input_parameter< double const& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type S0beta(S0betaSEXP);
    Rcpp::traits::input_parameter< double const& >::type sigma0logphi(sigma0logphiSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type distname(distnameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type linkname(linknameSEXP);
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< int const& >::type j(jSEXP);
    Rcpp::traits::input_parameter< int const& >::type J(JSEXP);
    Rcpp::traits::input_parameter< int const& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double const& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double const& >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< double const& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int const& >::type n0(n0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_params(y, X, beta, phi, Z, Gammainv, c0, S0beta, sigma0logphi, distname, linkname, n, j, J, p, alpha0, gamma0, b0, y0, X0, n0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayescopulareg_cdf_cpp", (DL_FUNC) &_bayescopulareg_cdf_cpp, 7},
    {"_bayescopulareg_conv_to_normal", (DL_FUNC) &_bayescopulareg_conv_to_normal, 7},
    {"_bayescopulareg_condnormal_cpp", (DL_FUNC) &_bayescopulareg_condnormal_cpp, 3},
    {"_bayescopulareg_copula_predict", (DL_FUNC) &_bayescopulareg_copula_predict, 8},
    {"_bayescopulareg_copula_predict_all", (DL_FUNC) &_bayescopulareg_copula_predict_all, 9},
    {"_bayescopulareg_copula_predict_all_list", (DL_FUNC) &_bayescopulareg_copula_predict_all_list, 9},
    {"_bayescopulareg_invcdf_cpp", (DL_FUNC) &_bayescopulareg_invcdf_cpp, 7},
    {"_bayescopulareg_sample_y", (DL_FUNC) &_bayescopulareg_sample_y, 7},
    {"_bayescopulareg_linkinv_cpp", (DL_FUNC) &_bayescopulareg_linkinv_cpp, 2},
    {"_bayescopulareg_logPost", (DL_FUNC) &_bayescopulareg_logPost, 19},
    {"_bayescopulareg_logPowerPrior_cpp", (DL_FUNC) &_bayescopulareg_logPowerPrior_cpp, 8},
    {"_bayescopulareg_logInitPrior_cpp", (DL_FUNC) &_bayescopulareg_logInitPrior_cpp, 6},
    {"_bayescopulareg_loglik_cpp", (DL_FUNC) &_bayescopulareg_loglik_cpp, 7},
    {"_bayescopulareg_sample_copula_cpp", (DL_FUNC) &_bayescopulareg_sample_copula_cpp, 19},
    {"_bayescopulareg_update_Gamma", (DL_FUNC) &_bayescopulareg_update_Gamma, 4},
    {"_bayescopulareg_update_Z", (DL_FUNC) &_bayescopulareg_update_Z, 10},
    {"_bayescopulareg_update_params", (DL_FUNC) &_bayescopulareg_update_params, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayescopulareg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
