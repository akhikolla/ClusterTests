// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "beyondWhittle_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// pacf2AR
NumericMatrix pacf2AR(NumericVector pacf);
RcppExport SEXP _beyondWhittle_pacf2AR(SEXP pacfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pacf(pacfSEXP);
    rcpp_result_gen = Rcpp::wrap(pacf2AR(pacf));
    return rcpp_result_gen;
END_RCPP
}
// genEpsARMAC
NumericVector genEpsARMAC(NumericVector zt, NumericVector ar, NumericVector ma);
RcppExport SEXP _beyondWhittle_genEpsARMAC(SEXP ztSEXP, SEXP arSEXP, SEXP maSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zt(ztSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ar(arSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ma(maSEXP);
    rcpp_result_gen = Rcpp::wrap(genEpsARMAC(zt, ar, ma));
    return rcpp_result_gen;
END_RCPP
}
// psd_arma
NumericVector psd_arma(NumericVector freq, NumericVector ar, NumericVector ma, double sigma2);
RcppExport SEXP _beyondWhittle_psd_arma(SEXP freqSEXP, SEXP arSEXP, SEXP maSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ar(arSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ma(maSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(psd_arma(freq, ar, ma, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// pFromV
NumericVector pFromV(NumericVector v);
RcppExport SEXP _beyondWhittle_pFromV(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(pFromV(v));
    return rcpp_result_gen;
END_RCPP
}
// vFromP
NumericVector vFromP(NumericVector p, const double eps);
RcppExport SEXP _beyondWhittle_vFromP(SEXP pSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(vFromP(p, eps));
    return rcpp_result_gen;
END_RCPP
}
// mixtureWeight
NumericVector mixtureWeight(NumericVector p, NumericVector w, unsigned k);
RcppExport SEXP _beyondWhittle_mixtureWeight(SEXP pSEXP, SEXP wSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< unsigned >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(mixtureWeight(p, w, k));
    return rcpp_result_gen;
END_RCPP
}
// densityMixture
NumericVector densityMixture(NumericVector weights, NumericMatrix densities);
RcppExport SEXP _beyondWhittle_densityMixture(SEXP weightsSEXP, SEXP densitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type densities(densitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(densityMixture(weights, densities));
    return rcpp_result_gen;
END_RCPP
}
// unrollPsd
NumericVector unrollPsd(NumericVector qPsd, unsigned n);
RcppExport SEXP _beyondWhittle_unrollPsd(SEXP qPsdSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type qPsd(qPsdSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unrollPsd(qPsd, n));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_multivariate_nuisance_cpp
List gibbs_multivariate_nuisance_cpp(arma::mat data, IntegerVector NA_pos, arma::cx_mat FZ, NumericVector eps_r, NumericVector eps_Z, NumericVector eps_U, int k_0, arma::vec r_0, arma::vec Z_0, arma::mat U_phi_0, arma::vec phi_def, double eta, double omega, arma::cx_mat Sigma, int Ntotal, int print_interval, double numerical_thresh, bool verbose, int L, double k_theta, List dbList);
RcppExport SEXP _beyondWhittle_gibbs_multivariate_nuisance_cpp(SEXP dataSEXP, SEXP NA_posSEXP, SEXP FZSEXP, SEXP eps_rSEXP, SEXP eps_ZSEXP, SEXP eps_USEXP, SEXP k_0SEXP, SEXP r_0SEXP, SEXP Z_0SEXP, SEXP U_phi_0SEXP, SEXP phi_defSEXP, SEXP etaSEXP, SEXP omegaSEXP, SEXP SigmaSEXP, SEXP NtotalSEXP, SEXP print_intervalSEXP, SEXP numerical_threshSEXP, SEXP verboseSEXP, SEXP LSEXP, SEXP k_thetaSEXP, SEXP dbListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NA_pos(NA_posSEXP);
    Rcpp::traits::input_parameter< arma::cx_mat >::type FZ(FZSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eps_r(eps_rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eps_Z(eps_ZSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eps_U(eps_USEXP);
    Rcpp::traits::input_parameter< int >::type k_0(k_0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type r_0(r_0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Z_0(Z_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U_phi_0(U_phi_0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi_def(phi_defSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::cx_mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type Ntotal(NtotalSEXP);
    Rcpp::traits::input_parameter< int >::type print_interval(print_intervalSEXP);
    Rcpp::traits::input_parameter< double >::type numerical_thresh(numerical_threshSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type k_theta(k_thetaSEXP);
    Rcpp::traits::input_parameter< List >::type dbList(dbListSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_multivariate_nuisance_cpp(data, NA_pos, FZ, eps_r, eps_Z, eps_U, k_0, r_0, Z_0, U_phi_0, phi_def, eta, omega, Sigma, Ntotal, print_interval, numerical_thresh, verbose, L, k_theta, dbList));
    return rcpp_result_gen;
END_RCPP
}
// realValuedPsd
arma::cube realValuedPsd(ComplexVector f_);
RcppExport SEXP _beyondWhittle_realValuedPsd(SEXP f_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    rcpp_result_gen = Rcpp::wrap(realValuedPsd(f_));
    return rcpp_result_gen;
END_RCPP
}
// complexValuedPsd
arma::cx_cube complexValuedPsd(NumericVector f_);
RcppExport SEXP _beyondWhittle_complexValuedPsd(SEXP f_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type f_(f_SEXP);
    rcpp_result_gen = Rcpp::wrap(complexValuedPsd(f_));
    return rcpp_result_gen;
END_RCPP
}
// get_f_matrix
arma::cx_cube get_f_matrix(arma::mat U_phi, arma::vec r, arma::vec Z, int k, Rcpp::List dbList);
RcppExport SEXP _beyondWhittle_get_f_matrix(SEXP U_phiSEXP, SEXP rSEXP, SEXP ZSEXP, SEXP kSEXP, SEXP dbListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type U_phi(U_phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbList(dbListSEXP);
    rcpp_result_gen = Rcpp::wrap(get_f_matrix(U_phi, r, Z, k, dbList));
    return rcpp_result_gen;
END_RCPP
}
// cx_cube_from_ComplexVector
arma::cx_cube cx_cube_from_ComplexVector(ComplexVector x);
RcppExport SEXP _beyondWhittle_cx_cube_from_ComplexVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cx_cube_from_ComplexVector(x));
    return rcpp_result_gen;
END_RCPP
}
// cube_from_NumericVector
arma::cube cube_from_NumericVector(NumericVector x);
RcppExport SEXP _beyondWhittle_cube_from_NumericVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cube_from_NumericVector(x));
    return rcpp_result_gen;
END_RCPP
}
// hasEigenValueSmallerZero
bool hasEigenValueSmallerZero(arma::cx_mat A, double TOL);
RcppExport SEXP _beyondWhittle_hasEigenValueSmallerZero(SEXP ASEXP, SEXP TOLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type TOL(TOLSEXP);
    rcpp_result_gen = Rcpp::wrap(hasEigenValueSmallerZero(A, TOL));
    return rcpp_result_gen;
END_RCPP
}
// acvMatrix
NumericMatrix acvMatrix(NumericVector acv);
RcppExport SEXP _beyondWhittle_acvMatrix(SEXP acvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type acv(acvSEXP);
    rcpp_result_gen = Rcpp::wrap(acvMatrix(acv));
    return rcpp_result_gen;
END_RCPP
}
// acvBlockMatrix
arma::mat acvBlockMatrix(arma::mat acv);
RcppExport SEXP _beyondWhittle_acvBlockMatrix(SEXP acvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type acv(acvSEXP);
    rcpp_result_gen = Rcpp::wrap(acvBlockMatrix(acv));
    return rcpp_result_gen;
END_RCPP
}
// acceptanceRate
double acceptanceRate(NumericVector trace);
RcppExport SEXP _beyondWhittle_acceptanceRate(SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(acceptanceRate(trace));
    return rcpp_result_gen;
END_RCPP
}
// get_U_cpp
arma::cx_cube get_U_cpp(const arma::mat& u_phi);
RcppExport SEXP _beyondWhittle_get_U_cpp(SEXP u_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u_phi(u_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(get_U_cpp(u_phi));
    return rcpp_result_gen;
END_RCPP
}
// unit_trace_x_from_phi
NumericVector unit_trace_x_from_phi(NumericVector phi);
RcppExport SEXP _beyondWhittle_unit_trace_x_from_phi(SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(unit_trace_x_from_phi(phi));
    return rcpp_result_gen;
END_RCPP
}
// unit_trace_L_from_x
arma::cx_mat unit_trace_L_from_x(arma::vec x);
RcppExport SEXP _beyondWhittle_unit_trace_L_from_x(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unit_trace_L_from_x(x));
    return rcpp_result_gen;
END_RCPP
}
// unit_trace_p
NumericVector unit_trace_p(unsigned d);
RcppExport SEXP _beyondWhittle_unit_trace_p(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(unit_trace_p(d));
    return rcpp_result_gen;
END_RCPP
}
// unit_trace_q
NumericVector unit_trace_q(unsigned d);
RcppExport SEXP _beyondWhittle_unit_trace_q(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(unit_trace_q(d));
    return rcpp_result_gen;
END_RCPP
}
// varma_transfer2psd
arma::cx_cube varma_transfer2psd(ComplexVector transfer_ar_, ComplexVector transfer_ma_, arma::cx_mat sigma);
RcppExport SEXP _beyondWhittle_varma_transfer2psd(SEXP transfer_ar_SEXP, SEXP transfer_ma_SEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type transfer_ar_(transfer_ar_SEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type transfer_ma_(transfer_ma_SEXP);
    Rcpp::traits::input_parameter< arma::cx_mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(varma_transfer2psd(transfer_ar_, transfer_ma_, sigma));
    return rcpp_result_gen;
END_RCPP
}
// transfer_polynomial
arma::cx_cube transfer_polynomial(NumericVector lambda, arma::mat coef);
RcppExport SEXP _beyondWhittle_transfer_polynomial(SEXP lambdaSEXP, SEXP coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coef(coefSEXP);
    rcpp_result_gen = Rcpp::wrap(transfer_polynomial(lambda, coef));
    return rcpp_result_gen;
END_RCPP
}
// epsilon_var
arma::mat epsilon_var(arma::mat zt, arma::mat ar);
RcppExport SEXP _beyondWhittle_epsilon_var(SEXP ztSEXP, SEXP arSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type zt(ztSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ar(arSEXP);
    rcpp_result_gen = Rcpp::wrap(epsilon_var(zt, ar));
    return rcpp_result_gen;
END_RCPP
}
// sldmvnorm
double sldmvnorm(arma::mat z_t, arma::mat Sigma);
RcppExport SEXP _beyondWhittle_sldmvnorm(SEXP z_tSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type z_t(z_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(sldmvnorm(z_t, Sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_beyondWhittle_pacf2AR", (DL_FUNC) &_beyondWhittle_pacf2AR, 1},
    {"_beyondWhittle_genEpsARMAC", (DL_FUNC) &_beyondWhittle_genEpsARMAC, 3},
    {"_beyondWhittle_psd_arma", (DL_FUNC) &_beyondWhittle_psd_arma, 4},
    {"_beyondWhittle_pFromV", (DL_FUNC) &_beyondWhittle_pFromV, 1},
    {"_beyondWhittle_vFromP", (DL_FUNC) &_beyondWhittle_vFromP, 2},
    {"_beyondWhittle_mixtureWeight", (DL_FUNC) &_beyondWhittle_mixtureWeight, 3},
    {"_beyondWhittle_densityMixture", (DL_FUNC) &_beyondWhittle_densityMixture, 2},
    {"_beyondWhittle_unrollPsd", (DL_FUNC) &_beyondWhittle_unrollPsd, 2},
    {"_beyondWhittle_gibbs_multivariate_nuisance_cpp", (DL_FUNC) &_beyondWhittle_gibbs_multivariate_nuisance_cpp, 21},
    {"_beyondWhittle_realValuedPsd", (DL_FUNC) &_beyondWhittle_realValuedPsd, 1},
    {"_beyondWhittle_complexValuedPsd", (DL_FUNC) &_beyondWhittle_complexValuedPsd, 1},
    {"_beyondWhittle_get_f_matrix", (DL_FUNC) &_beyondWhittle_get_f_matrix, 5},
    {"_beyondWhittle_cx_cube_from_ComplexVector", (DL_FUNC) &_beyondWhittle_cx_cube_from_ComplexVector, 1},
    {"_beyondWhittle_cube_from_NumericVector", (DL_FUNC) &_beyondWhittle_cube_from_NumericVector, 1},
    {"_beyondWhittle_hasEigenValueSmallerZero", (DL_FUNC) &_beyondWhittle_hasEigenValueSmallerZero, 2},
    {"_beyondWhittle_acvMatrix", (DL_FUNC) &_beyondWhittle_acvMatrix, 1},
    {"_beyondWhittle_acvBlockMatrix", (DL_FUNC) &_beyondWhittle_acvBlockMatrix, 1},
    {"_beyondWhittle_acceptanceRate", (DL_FUNC) &_beyondWhittle_acceptanceRate, 1},
    {"_beyondWhittle_get_U_cpp", (DL_FUNC) &_beyondWhittle_get_U_cpp, 1},
    {"_beyondWhittle_unit_trace_x_from_phi", (DL_FUNC) &_beyondWhittle_unit_trace_x_from_phi, 1},
    {"_beyondWhittle_unit_trace_L_from_x", (DL_FUNC) &_beyondWhittle_unit_trace_L_from_x, 1},
    {"_beyondWhittle_unit_trace_p", (DL_FUNC) &_beyondWhittle_unit_trace_p, 1},
    {"_beyondWhittle_unit_trace_q", (DL_FUNC) &_beyondWhittle_unit_trace_q, 1},
    {"_beyondWhittle_varma_transfer2psd", (DL_FUNC) &_beyondWhittle_varma_transfer2psd, 3},
    {"_beyondWhittle_transfer_polynomial", (DL_FUNC) &_beyondWhittle_transfer_polynomial, 2},
    {"_beyondWhittle_epsilon_var", (DL_FUNC) &_beyondWhittle_epsilon_var, 2},
    {"_beyondWhittle_sldmvnorm", (DL_FUNC) &_beyondWhittle_sldmvnorm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_beyondWhittle(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
